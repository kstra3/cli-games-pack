name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup GCC (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc make
      shell: bash
        
    - name: Setup GCC (macOS)
      if: runner.os == 'macOS'
      run: |
        which gcc || which clang
        gcc --version || clang --version
      shell: bash
        
    - name: Setup MinGW (Windows)
      if: runner.os == 'Windows'
      run: |
        gcc --version
        make --version
      shell: powershell
        
    - name: Build project
      run: |
        make clean
        make
      shell: bash
      
    - name: Verify build (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        ls -la cli-games || ls -la cli-games.exe
        echo "✅ Build verification successful on ${{ runner.os }}"
      shell: bash
        
    - name: Verify build (Windows)
      if: runner.os == 'Windows'
      run: |
        if (Test-Path "cli-games.exe") {
            Get-ChildItem -Name "cli-games.exe"
        } else {
            Write-Host "❌ Build failed - cli-games.exe not found"
            exit 1
        }
      shell: powershell
        
    - name: Upload artifacts (Linux/macOS)
      if: runner.os != 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: cli-games-${{ matrix.os }}
        path: cli-games
        
    - name: Upload artifacts (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: cli-games-${{ matrix.os }}
        path: |
          cli-games.exe
          play.bat
