name: Build and Test CLI Games Pack v2.1

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup build environment (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc make
        echo "Environment setup complete for CLI Games Pack v2.1"
        echo "Building 21 games including new Yahtzee game"
        gcc --version
        make --version
      shell: bash
        
    - name: Setup build environment (macOS)
      if: runner.os == 'macOS'
      run: |
        echo "macOS build environment for CLI Games Pack v2.1"
        echo "Building 21 games including new Yahtzee game"
        gcc --version || clang --version
        make --version
      shell: bash
        
    - name: Setup build environment (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "Windows build environment for CLI Games Pack v2.1"
        echo "Building 21 games including new Yahtzee game"
        gcc --version
        mingw32-make --version || make --version
      shell: cmd
      
    - name: List directory contents
      run: |
        echo "Current directory contents:"
        ls -la || dir
        echo ""
        echo "Games directory contents:"
        ls -la games/ || dir games\
        echo ""
        echo "Confirming Yahtzee game is present:"
        ls -la games/yahtzee.c || dir games\yahtzee.c || echo "‚ùå Yahtzee game file not found"
      shell: bash
        
    - name: Clean previous builds
      run: |
        echo "Cleaning previous builds..."
        make clean || echo "Clean failed or no previous build"
      shell: bash
      
    - name: Build project (Unix-like)
      if: runner.os != 'Windows'
      run: |
        echo "Building CLI Games Pack v2.1 on ${{ runner.os }}..."
        echo "Compiling 21 games including Yahtzee..."
        make
      shell: bash
      
    - name: Build project (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "Building CLI Games Pack v2.1 on Windows..."
        echo "Compiling 21 games including Yahtzee..."
        mingw32-make || make
      shell: cmd
      
    - name: List build results
      run: |
        echo "Build results for CLI Games Pack v2.1:"
        ls -la cli-games* || dir cli-games* || echo "No executables found"
        echo ""
        echo "Confirming all object files were created:"
        ls -la games/*.o || dir games\*.o || echo "No object files found"
      shell: bash
        
    - name: Verify executable (Unix-like)
      if: runner.os != 'Windows'
      run: |
        if [ -f "cli-games" ]; then
          echo "‚úÖ Success: cli-games executable found"
          echo "CLI Games Pack v2.1 with 21 games (including Yahtzee) built successfully!"
          file cli-games
          ls -lh cli-games
        elif [ -f "cli-games.exe" ]; then
          echo "‚úÖ Success: cli-games.exe executable found"
          echo "CLI Games Pack v2.1 with 21 games (including Yahtzee) built successfully!"
          file cli-games.exe
          ls -lh cli-games.exe
        else
          echo "‚ùå Error: No executable found"
          exit 1
        fi
      shell: bash
        
    - name: Verify executable (Windows)
      if: runner.os == 'Windows'
      run: |
        if exist "cli-games.exe" (
          echo ‚úÖ Success: cli-games.exe found
          echo CLI Games Pack v2.1 with 21 games including Yahtzee built successfully!
          dir cli-games.exe
        ) else (
          echo ‚ùå Error: cli-games.exe not found
          exit /b 1
        )
      shell: cmd
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cli-games-pack-v2.1-${{ matrix.os }}
        path: |
          cli-games*
          !*.o
        if-no-files-found: error
      
    - name: Build summary
      run: |
        echo "üéÆ CLI Games Pack v2.1 Build Summary"
        echo "=================================="
        echo "‚úÖ Total Games: 21"
        echo "‚úÖ New in v2.1: Yahtzee (Classic Dice Game)"
        echo "‚úÖ Platform: ${{ matrix.os }}"
        echo "‚úÖ Status: Build Successful"
        echo ""
        echo "Games included:"
        echo "‚Ä¢ Classic games: Rock Paper Scissors, Tic Tac Toe, Hangman"
        echo "‚Ä¢ Card games: Blackjack, Slot Machine"
        echo "‚Ä¢ Puzzle games: 2048, Minesweeper, 15-Puzzle"
        echo "‚Ä¢ Action games: Snake, Flappy Bird, Space Invaders"
        echo "‚Ä¢ NEW: Yahtzee with full scoring and strategy hints"
      shell: bash
