name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup build environment (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc make
        echo "Environment setup complete"
        gcc --version
        make --version
      shell: bash
        
    - name: Setup build environment (macOS)
      if: runner.os == 'macOS'
      run: |
        echo "macOS build environment"
        gcc --version || clang --version
        make --version
      shell: bash
        
    - name: Setup build environment (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "Windows build environment"
        gcc --version
        mingw32-make --version || make --version
      shell: cmd
      
    - name: List directory contents
      run: |
        echo "Current directory contents:"
        ls -la || dir
      shell: bash
        
    - name: Clean previous builds
      run: |
        echo "Cleaning previous builds..."
        make clean || echo "Clean failed or no previous build"
      shell: bash
      
    - name: Build project (Unix-like)
      if: runner.os != 'Windows'
      run: |
        echo "Building on ${{ runner.os }}..."
        make
      shell: bash
      
    - name: Build project (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "Building on Windows..."
        mingw32-make || make
      shell: cmd
      
    - name: List build results
      run: |
        echo "Build results:"
        ls -la cli-games* || dir cli-games* || echo "No executables found"
      shell: bash
        
    - name: Verify executable (Unix-like)
      if: runner.os != 'Windows'
      run: |
        if [ -f "cli-games" ]; then
          echo "✅ Success: cli-games executable found"
          file cli-games
        elif [ -f "cli-games.exe" ]; then
          echo "✅ Success: cli-games.exe executable found"
          file cli-games.exe
        else
          echo "❌ Error: No executable found"
          exit 1
        fi
      shell: bash
        
    - name: Verify executable (Windows)
      if: runner.os == 'Windows'
      run: |
        if exist "cli-games.exe" (
          echo ✅ Success: cli-games.exe found
          dir cli-games.exe
        ) else (
          echo ❌ Error: cli-games.exe not found
          exit /b 1
        )
      shell: cmd
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cli-games-${{ matrix.os }}
        path: |
          cli-games*
          !*.o
